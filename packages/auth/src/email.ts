// File: packages/auth/src/email.ts

import { Resend } from 'resend';

// Build-safety: no top-level env reads or client init.
// Everything happens at runtime inside functions.

function requireEnv(
  name: 'RESEND_API_KEY' | 'EMAIL_FROM' | 'NEXT_PUBLIC_APP_URL',
): string {
  const v = process.env[name];
  if (!v || !v.trim())
    throw new Error(`Missing required environment variable: ${name}`);
  return v.trim();
}

function withoutTrailingSlash(url: string): string {
  return url.replace(/\/+$/, '');
}

async function getResendClient(): Promise<Resend> {
  const key = requireEnv('RESEND_API_KEY');
  // Lazy-init the client when needed
  return new Resend(key);
}

// Safely read { data: { id } } without using `any`
function getEmailId(response: unknown): string | null {
  if (response && typeof response === 'object' && 'data' in response) {
    const data = (response as { data?: unknown }).data;
    if (data && typeof data === 'object' && 'id' in data) {
      const idValue = (data as { id?: unknown }).id;
      return typeof idValue === 'string' ? idValue : null;
    }
  }
  return null;
}

export async function sendMagicLink(to: string, link: string) {
  const resend = await getResendClient();
  const from = requireEnv('EMAIL_FROM');

  const response = await resend.emails.send({
    from,
    to,
    subject: 'Confirm your email',
    html: `<p>Click here to log in: <a href="${link}">${link}</a></p>`,
  });

  // Optional logging (non-fatal)
  console.log('[sendMagicLink] sent', {
    to,
    id: getEmailId(response),
  });
}

/**
 * Send a team invite email that routes the user to /accept-invite
 * where they can set their password. The token should be generated by your invite API.
 *
 * Usage:
 *   await sendInviteEmail({ to, token, companyName });
 */
export async function sendInviteEmail(params: {
  to: string;
  token: string;
  companyName?: string;
}) {
  const resend = await getResendClient();
  const from = requireEnv('EMAIL_FROM');
  const appUrl = withoutTrailingSlash(requireEnv('NEXT_PUBLIC_APP_URL'));

  const { to, token, companyName } = params;

  const link = `${appUrl}/accept-invite?token=${encodeURIComponent(token)}`;

  const subject = companyName
    ? `You're invited to join ${companyName}`
    : 'You’re invited to join';

  const html = `
    <div style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;line-height:1.6;color:#0f172a">
      <p style="margin:0 0 12px">
        You’ve been invited${companyName ? ` to join <strong>${escapeHtml(companyName)}</strong>` : ''}.
      </p>
      <p style="margin:0 0 20px">Click the button below to accept the invite and set your password.</p>
      <p style="margin:0 0 20px">
        <a href="${link}" style="display:inline-block;padding:12px 18px;border-radius:8px;background:#111827;color:#fff;text-decoration:none;font-weight:600">
          Accept invite
        </a>
      </p>
      <p style="margin:0 0 8px">Or paste this link into your browser:</p>
      <p style="margin:0 0 20px;color:#334155">${link}</p>
      <p style="margin:0;color:#64748b;font-size:12px">If you didn’t expect this invitation, you can safely ignore this email.</p>
    </div>
  `.trim();

  const response = await resend.emails.send({
    from,
    to,
    subject,
    html,
  });

  console.log('[sendInviteEmail] sent', {
    to,
    id: getEmailId(response),
  });
}

// --- helpers ---
function escapeHtml(s: string) {
  return s
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
}
